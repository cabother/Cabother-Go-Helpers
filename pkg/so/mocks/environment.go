// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	so "github.com/cabother/cabother-go-helpers/pkg/so"
	mock "github.com/stretchr/testify/mock"
)

// Environment is an autogenerated mock type for the Environment type
type Environment struct {
	mock.Mock
}

type Environment_Expecter struct {
	mock *mock.Mock
}

func (_m *Environment) EXPECT() *Environment_Expecter {
	return &Environment_Expecter{mock: &_m.Mock}
}

// GetEnv provides a mock function with given fields: name
func (_m *Environment) GetEnv(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Environment_GetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnv'
type Environment_GetEnv_Call struct {
	*mock.Call
}

// GetEnv is a helper method to define mock.On call
//   - name string
func (_e *Environment_Expecter) GetEnv(name interface{}) *Environment_GetEnv_Call {
	return &Environment_GetEnv_Call{Call: _e.mock.On("GetEnv", name)}
}

func (_c *Environment_GetEnv_Call) Run(run func(name string)) *Environment_GetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Environment_GetEnv_Call) Return(_a0 string) *Environment_GetEnv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environment_GetEnv_Call) RunAndReturn(run func(string) string) *Environment_GetEnv_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvOrDefault provides a mock function with given fields: name, defaultValue
func (_m *Environment) GetEnvOrDefault(name string, defaultValue string) string {
	ret := _m.Called(name, defaultValue)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Environment_GetEnvOrDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvOrDefault'
type Environment_GetEnvOrDefault_Call struct {
	*mock.Call
}

// GetEnvOrDefault is a helper method to define mock.On call
//   - name string
//   - defaultValue string
func (_e *Environment_Expecter) GetEnvOrDefault(name interface{}, defaultValue interface{}) *Environment_GetEnvOrDefault_Call {
	return &Environment_GetEnvOrDefault_Call{Call: _e.mock.On("GetEnvOrDefault", name, defaultValue)}
}

func (_c *Environment_GetEnvOrDefault_Call) Run(run func(name string, defaultValue string)) *Environment_GetEnvOrDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Environment_GetEnvOrDefault_Call) Return(_a0 string) *Environment_GetEnvOrDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environment_GetEnvOrDefault_Call) RunAndReturn(run func(string, string) string) *Environment_GetEnvOrDefault_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvironmentConfigs provides a mock function with given fields:
func (_m *Environment) GetEnvironmentConfigs() *so.EnvironmentConfig {
	ret := _m.Called()

	var r0 *so.EnvironmentConfig
	if rf, ok := ret.Get(0).(func() *so.EnvironmentConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*so.EnvironmentConfig)
		}
	}

	return r0
}

// Environment_GetEnvironmentConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvironmentConfigs'
type Environment_GetEnvironmentConfigs_Call struct {
	*mock.Call
}

// GetEnvironmentConfigs is a helper method to define mock.On call
func (_e *Environment_Expecter) GetEnvironmentConfigs() *Environment_GetEnvironmentConfigs_Call {
	return &Environment_GetEnvironmentConfigs_Call{Call: _e.mock.On("GetEnvironmentConfigs")}
}

func (_c *Environment_GetEnvironmentConfigs_Call) Run(run func()) *Environment_GetEnvironmentConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Environment_GetEnvironmentConfigs_Call) Return(_a0 *so.EnvironmentConfig) *Environment_GetEnvironmentConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environment_GetEnvironmentConfigs_Call) RunAndReturn(run func() *so.EnvironmentConfig) *Environment_GetEnvironmentConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntEnvOrDefault provides a mock function with given fields: name, defaultValue
func (_m *Environment) GetIntEnvOrDefault(name string, defaultValue int) int {
	ret := _m.Called(name, defaultValue)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(name, defaultValue)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Environment_GetIntEnvOrDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntEnvOrDefault'
type Environment_GetIntEnvOrDefault_Call struct {
	*mock.Call
}

// GetIntEnvOrDefault is a helper method to define mock.On call
//   - name string
//   - defaultValue int
func (_e *Environment_Expecter) GetIntEnvOrDefault(name interface{}, defaultValue interface{}) *Environment_GetIntEnvOrDefault_Call {
	return &Environment_GetIntEnvOrDefault_Call{Call: _e.mock.On("GetIntEnvOrDefault", name, defaultValue)}
}

func (_c *Environment_GetIntEnvOrDefault_Call) Run(run func(name string, defaultValue int)) *Environment_GetIntEnvOrDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Environment_GetIntEnvOrDefault_Call) Return(_a0 int) *Environment_GetIntEnvOrDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environment_GetIntEnvOrDefault_Call) RunAndReturn(run func(string, int) int) *Environment_GetIntEnvOrDefault_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnvironment creates a new instance of Environment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Environment {
	mock := &Environment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
