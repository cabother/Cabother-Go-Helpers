// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Datetime is an autogenerated mock type for the Datetime type
type Datetime struct {
	mock.Mock
}

type Datetime_Expecter struct {
	mock *mock.Mock
}

func (_m *Datetime) EXPECT() *Datetime_Expecter {
	return &Datetime_Expecter{mock: &_m.Mock}
}

// FormatDate provides a mock function with given fields: _a0, format
func (_m *Datetime) FormatDate(_a0 string, format string) (string, error) {
	ret := _m.Called(_a0, format)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(_a0, format)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, format)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datetime_FormatDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatDate'
type Datetime_FormatDate_Call struct {
	*mock.Call
}

// FormatDate is a helper method to define mock.On call
//   - _a0 string
//   - format string
func (_e *Datetime_Expecter) FormatDate(_a0 interface{}, format interface{}) *Datetime_FormatDate_Call {
	return &Datetime_FormatDate_Call{Call: _e.mock.On("FormatDate", _a0, format)}
}

func (_c *Datetime_FormatDate_Call) Run(run func(_a0 string, format string)) *Datetime_FormatDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Datetime_FormatDate_Call) Return(_a0 string, _a1 error) *Datetime_FormatDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Datetime_FormatDate_Call) RunAndReturn(run func(string, string) (string, error)) *Datetime_FormatDate_Call {
	_c.Call.Return(run)
	return _c
}

// FormatDatetime provides a mock function with given fields: _a0, format
func (_m *Datetime) FormatDatetime(_a0 time.Time, format string) string {
	ret := _m.Called(_a0, format)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time, string) string); ok {
		r0 = rf(_a0, format)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Datetime_FormatDatetime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatDatetime'
type Datetime_FormatDatetime_Call struct {
	*mock.Call
}

// FormatDatetime is a helper method to define mock.On call
//   - _a0 time.Time
//   - format string
func (_e *Datetime_Expecter) FormatDatetime(_a0 interface{}, format interface{}) *Datetime_FormatDatetime_Call {
	return &Datetime_FormatDatetime_Call{Call: _e.mock.On("FormatDatetime", _a0, format)}
}

func (_c *Datetime_FormatDatetime_Call) Run(run func(_a0 time.Time, format string)) *Datetime_FormatDatetime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string))
	})
	return _c
}

func (_c *Datetime_FormatDatetime_Call) Return(_a0 string) *Datetime_FormatDatetime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datetime_FormatDatetime_Call) RunAndReturn(run func(time.Time, string) string) *Datetime_FormatDatetime_Call {
	_c.Call.Return(run)
	return _c
}

// GetDateNow provides a mock function with given fields: format
func (_m *Datetime) GetDateNow(format string) string {
	ret := _m.Called(format)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(format)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Datetime_GetDateNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDateNow'
type Datetime_GetDateNow_Call struct {
	*mock.Call
}

// GetDateNow is a helper method to define mock.On call
//   - format string
func (_e *Datetime_Expecter) GetDateNow(format interface{}) *Datetime_GetDateNow_Call {
	return &Datetime_GetDateNow_Call{Call: _e.mock.On("GetDateNow", format)}
}

func (_c *Datetime_GetDateNow_Call) Run(run func(format string)) *Datetime_GetDateNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Datetime_GetDateNow_Call) Return(_a0 string) *Datetime_GetDateNow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datetime_GetDateNow_Call) RunAndReturn(run func(string) string) *Datetime_GetDateNow_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatetime creates a new instance of Datetime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatetime(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Datetime {
	mock := &Datetime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
