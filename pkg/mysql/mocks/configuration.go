// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	mysql "github.com/cabother/cabother-go-helpers/pkg/mysql"
	mock "github.com/stretchr/testify/mock"
)

// Configuration is an autogenerated mock type for the Configuration type
type Configuration struct {
	mock.Mock
}

type Configuration_Expecter struct {
	mock *mock.Mock
}

func (_m *Configuration) EXPECT() *Configuration_Expecter {
	return &Configuration_Expecter{mock: &_m.Mock}
}

// GetCustomMySQLConfigs provides a mock function with given fields: database, host, username, password
func (_m *Configuration) GetCustomMySQLConfigs(database string, host string, username string, password string) *mysql.MySQLConfig {
	ret := _m.Called(database, host, username, password)

	var r0 *mysql.MySQLConfig
	if rf, ok := ret.Get(0).(func(string, string, string, string) *mysql.MySQLConfig); ok {
		r0 = rf(database, host, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.MySQLConfig)
		}
	}

	return r0
}

// Configuration_GetCustomMySQLConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomMySQLConfigs'
type Configuration_GetCustomMySQLConfigs_Call struct {
	*mock.Call
}

// GetCustomMySQLConfigs is a helper method to define mock.On call
//   - database string
//   - host string
//   - username string
//   - password string
func (_e *Configuration_Expecter) GetCustomMySQLConfigs(database interface{}, host interface{}, username interface{}, password interface{}) *Configuration_GetCustomMySQLConfigs_Call {
	return &Configuration_GetCustomMySQLConfigs_Call{Call: _e.mock.On("GetCustomMySQLConfigs", database, host, username, password)}
}

func (_c *Configuration_GetCustomMySQLConfigs_Call) Run(run func(database string, host string, username string, password string)) *Configuration_GetCustomMySQLConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Configuration_GetCustomMySQLConfigs_Call) Return(_a0 *mysql.MySQLConfig) *Configuration_GetCustomMySQLConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_GetCustomMySQLConfigs_Call) RunAndReturn(run func(string, string, string, string) *mysql.MySQLConfig) *Configuration_GetCustomMySQLConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultMySQLConfigs provides a mock function with given fields:
func (_m *Configuration) GetDefaultMySQLConfigs() *mysql.MySQLConfig {
	ret := _m.Called()

	var r0 *mysql.MySQLConfig
	if rf, ok := ret.Get(0).(func() *mysql.MySQLConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.MySQLConfig)
		}
	}

	return r0
}

// Configuration_GetDefaultMySQLConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultMySQLConfigs'
type Configuration_GetDefaultMySQLConfigs_Call struct {
	*mock.Call
}

// GetDefaultMySQLConfigs is a helper method to define mock.On call
func (_e *Configuration_Expecter) GetDefaultMySQLConfigs() *Configuration_GetDefaultMySQLConfigs_Call {
	return &Configuration_GetDefaultMySQLConfigs_Call{Call: _e.mock.On("GetDefaultMySQLConfigs")}
}

func (_c *Configuration_GetDefaultMySQLConfigs_Call) Run(run func()) *Configuration_GetDefaultMySQLConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Configuration_GetDefaultMySQLConfigs_Call) Return(_a0 *mysql.MySQLConfig) *Configuration_GetDefaultMySQLConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_GetDefaultMySQLConfigs_Call) RunAndReturn(run func() *mysql.MySQLConfig) *Configuration_GetDefaultMySQLConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfiguration creates a new instance of Configuration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Configuration {
	mock := &Configuration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
