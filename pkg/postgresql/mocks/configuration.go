// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	postgresql "github.com/cabother/cabother-go-helpers/pkg/postgresql"
	mock "github.com/stretchr/testify/mock"
)

// Configuration is an autogenerated mock type for the Configuration type
type Configuration struct {
	mock.Mock
}

type Configuration_Expecter struct {
	mock *mock.Mock
}

func (_m *Configuration) EXPECT() *Configuration_Expecter {
	return &Configuration_Expecter{mock: &_m.Mock}
}

// GetCustomPostgreSQLConfigs provides a mock function with given fields: database, host, username, password
func (_m *Configuration) GetCustomPostgreSQLConfigs(database string, host string, username string, password string) *postgresql.PostgreSQLConfig {
	ret := _m.Called(database, host, username, password)

	var r0 *postgresql.PostgreSQLConfig
	if rf, ok := ret.Get(0).(func(string, string, string, string) *postgresql.PostgreSQLConfig); ok {
		r0 = rf(database, host, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresql.PostgreSQLConfig)
		}
	}

	return r0
}

// Configuration_GetCustomPostgreSQLConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomPostgreSQLConfigs'
type Configuration_GetCustomPostgreSQLConfigs_Call struct {
	*mock.Call
}

// GetCustomPostgreSQLConfigs is a helper method to define mock.On call
//   - database string
//   - host string
//   - username string
//   - password string
func (_e *Configuration_Expecter) GetCustomPostgreSQLConfigs(database interface{}, host interface{}, username interface{}, password interface{}) *Configuration_GetCustomPostgreSQLConfigs_Call {
	return &Configuration_GetCustomPostgreSQLConfigs_Call{Call: _e.mock.On("GetCustomPostgreSQLConfigs", database, host, username, password)}
}

func (_c *Configuration_GetCustomPostgreSQLConfigs_Call) Run(run func(database string, host string, username string, password string)) *Configuration_GetCustomPostgreSQLConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Configuration_GetCustomPostgreSQLConfigs_Call) Return(_a0 *postgresql.PostgreSQLConfig) *Configuration_GetCustomPostgreSQLConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_GetCustomPostgreSQLConfigs_Call) RunAndReturn(run func(string, string, string, string) *postgresql.PostgreSQLConfig) *Configuration_GetCustomPostgreSQLConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultPostgreSQLConfigs provides a mock function with given fields:
func (_m *Configuration) GetDefaultPostgreSQLConfigs() *postgresql.PostgreSQLConfig {
	ret := _m.Called()

	var r0 *postgresql.PostgreSQLConfig
	if rf, ok := ret.Get(0).(func() *postgresql.PostgreSQLConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresql.PostgreSQLConfig)
		}
	}

	return r0
}

// Configuration_GetDefaultPostgreSQLConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultPostgreSQLConfigs'
type Configuration_GetDefaultPostgreSQLConfigs_Call struct {
	*mock.Call
}

// GetDefaultPostgreSQLConfigs is a helper method to define mock.On call
func (_e *Configuration_Expecter) GetDefaultPostgreSQLConfigs() *Configuration_GetDefaultPostgreSQLConfigs_Call {
	return &Configuration_GetDefaultPostgreSQLConfigs_Call{Call: _e.mock.On("GetDefaultPostgreSQLConfigs")}
}

func (_c *Configuration_GetDefaultPostgreSQLConfigs_Call) Run(run func()) *Configuration_GetDefaultPostgreSQLConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Configuration_GetDefaultPostgreSQLConfigs_Call) Return(_a0 *postgresql.PostgreSQLConfig) *Configuration_GetDefaultPostgreSQLConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Configuration_GetDefaultPostgreSQLConfigs_Call) RunAndReturn(run func() *postgresql.PostgreSQLConfig) *Configuration_GetDefaultPostgreSQLConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfiguration creates a new instance of Configuration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Configuration {
	mock := &Configuration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
